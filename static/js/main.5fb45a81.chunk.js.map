{"version":3,"sources":["components/phonebook/container.js","components/phonebook/phonebook.js","components/phonebook/contacts.js","components/phonebook/filter.js","App.js","reportWebVitals.js","index.js"],"names":["Container","children","className","Phonebook","onSubmit","useState","textName","setTextName","number","setNumber","reset","e","preventDefault","type","name","pattern","title","required","value","onChange","currentTarget","Contacts","ContactsData","onDeleteContact","map","id","onClick","Filter","App","contacts","setContacts","filter","setFilter","useEffect","contactsData","JSON","parse","localStorage","getItem","setItem","stringify","filterContact","contact","toLowerCase","includes","nameContacts","shortid","generate","allContacts","nameNew","find","alert","prevContacts","console","log","contactId","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fb45a81.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\r\n\r\nexport default Container;\r\n","import { useState } from 'react';\r\n\r\nimport './css/phonebook.css';\r\nexport default function Phonebook({ onSubmit }) {\r\n  const [textName, setTextName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const hadleInputChange = e => {\r\n    setTextName(e.currentTarget.value);\r\n  };\r\n  const hadleInputNumber = e => {\r\n    setNumber(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(textName, number);\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setTextName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"formFilling\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          className=\"inputContact\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={textName}\r\n          onChange={hadleInputChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number phone\r\n        <input\r\n          className=\"inputContact\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={hadleInputNumber}\r\n        />\r\n      </label>\r\n\r\n      <button className=\"buttonAdd\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './css/contacts.css';\r\n\r\nconst Contacts = ({ ContactsData, onDeleteContact }) => {\r\n  return (\r\n    <ul className=\"contacts\">\r\n      {ContactsData.map(({ name, number, id }) => (\r\n        <li className=\"contacts-items\" key={id}>\r\n          <span className=\"contacts-name\">{name}</span>\r\n          <span className=\"contacts-number\">{number}</span>\r\n          <button onClick={() => onDeleteContact(id)}>Delete</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nContacts.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport './css/filter.css';\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className=\"filter\">\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n","import { useEffect, useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport Container from './components/phonebook/container';\r\nimport Phonebook from './components/phonebook/phonebook';\r\nimport Contacts from './components/phonebook/contacts';\r\nimport Filter from './components/phonebook/filter';\r\nimport './components/phonebook/css/contacts.css';\r\nconst App = () => {\r\n  const [contacts, setContacts] = useState([\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    const contactsData = JSON.parse(localStorage.getItem('contacts'));\r\n    if (contactsData) setContacts(contactsData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n  const formSubmit = (name, number) => {\r\n    let nameContacts;\r\n\r\n    nameContacts = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    const allContacts = contacts.map(contact => contact.name.toLowerCase());\r\n\r\n    const nameNew = nameContacts.name.toLowerCase();\r\n\r\n    if (allContacts.find(contact => contact === nameNew)) {\r\n      return alert('such name already exists');\r\n    }\r\n\r\n    setContacts(prevContacts => [nameContacts, ...prevContacts]);\r\n    console.log(contacts);\r\n  };\r\n  const changeFilter = e => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  const deleteContacts = contactId => {\r\n    setContacts(prevContacts =>\r\n      prevContacts.filter(contact => contact.id !== contactId),\r\n    );\r\n  };\r\n\r\n  const filterContact = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n  return (\r\n    <Container>\r\n      <Phonebook onSubmit={formSubmit} />\r\n      <div className=\"contactsDiv\">\r\n        <Contacts\r\n          ContactsData={filterContact}\r\n          onDeleteContact={deleteContacts}\r\n        />\r\n      </div>\r\n      <Filter value={filter} onChange={changeFilter} />\r\n    </Container>\r\n  );\r\n};\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}